####################
# Gateway settings #
####################
gatewayIp  = "192.168.178.48"   # The local IP address of your gateway
gatewayKey = "LDJSVW4UPCH6aORG" # The connection code on the back of the gateway



#################
# Time settings #
#################
# Alarm time (morning)
userAlarmTime    = (9, 30)      # Time alarm is set in (hour, minute)
userAlarmOffset  = 30           # Wakeup phase offset in minutes

# Bed time (evening)
userSleepTime    = (23, 30)     # Bedtime in (hour, minute)
userWindDownTime = 30           # Wind down time before bed in minutes


# Brightness and color tweaks
briCorrect       = (0, 100)     # [min, max] brightness in %
colorCorrect     = (0, 100)     # [min, max] color temp in %




#####################
# Advanced settings #
#####################
briRange         = (1, 254)     # [min, max] brightness in val

colorRange       = (0, 13)      # [min, max] color temp in val
colorValues = (2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3200, 3400, 3600, 3800, 4000) # In Kelvin







minPerTimeCode   = 1            # Minutes per datapoint
totalDataPoints = (24*60) // minPerTimeCode

morningSlope = (1, 102)
dayFlat = 103
eveningSlope = (105, 605)
nightFlat = 0


brightnessData = (0,0,0,1.3,4.8,8.3,11.8,15.2,18.7,22.2,25.7,29.1,32.6,36.1,39.6,43,46.5,50,53.5,56.9,60.3,63.6,66.7,69.8,72.6,75.3,77.8,80.1,82.2,84.2,85.9,87.5,89,90.3,91.4,92.5,93.4,94.2,94.9,95.5,96.1,96.6,97,97.4,97.7,98,98.3,98.5,98.7,98.9,99,99.1,99.2,99.3,99.4,99.5,99.6,99.6,99.7,99.7,99.7,99.8,99.8,99.8,99.9,99.9,99.9,99.9,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99.9,99.9,99.9,99.8,99.7,99.7,99.6,99.5,99.4,99.3,99.2,99.1,99,98.8,98.7,98.5,98.4,98.2,98,97.8,97.6,97.4,97.2,97,96.8,96.6,96.3,96.1,95.8,95.6,95.3,95,94.8,94.6,94.4,94.2,94,93.8,93.6,93.4,93.2,93,92.8,92.6,92.4,92.2,92,91.8,91.6,91.4,91.2,91,90.8,90.6,90.4,90.1,89.9,89.7,89.5,89.3,89.1,88.9,88.7,88.5,88.3,88.1,87.9,87.7,87.5,87.3,87.1,86.9,86.7,86.5,86.3,86.1,85.9,85.7,85.5,85.3,85.1,84.9,84.7,84.5,84.3,84.1,83.9,83.7,83.5,83.3,83.1,82.9,82.7,82.5,82.3,82.1,81.9,81.7,81.5,81.3,81.1,80.9,80.6,80.4,80.2,80,79.8,79.6,79.4,79.2,79,78.8,78.6,78.4,78.2,78,77.8,77.6,77.4,77.2,77,76.8,76.6,76.4,76.2,76,75.8,75.6,75.4,75.2,75,74.8,74.6,74.4,74.2,74,73.8,73.6,73.4,73.2,73,72.8,72.6,72.4,72.2,72,71.8,71.6,71.4,71.1,70.9,70.7,70.5,70.3,70.1,69.9,69.7,69.5,69.3,69.1,68.9,68.7,68.5,68.3,68.1,67.9,67.7,67.5,67.3,67.1,66.9,66.7,66.5,66.3,66.1,65.9,65.7,65.5,65.3,65.1,64.9,64.7,64.5,64.3,64.1,63.9,63.7,63.5,63.3,63.1,62.9,62.7,62.5,62.3,62.1,61.9,61.6,61.4,61.2,61,60.8,60.6,60.4,60.2,60,59.8,59.6,59.4,59.2,59,58.8,58.6,58.4,58.2,58,57.8,57.6,57.4,57.2,57,56.8,56.6,56.4,56.2,56,55.8,55.6,55.4,55.2,55,54.8,54.6,54.4,54.2,54,53.8,53.6,53.4,53.2,53,52.8,52.6,52.4,52.1,51.9,51.7,51.5,51.3,51.1,50.9,50.7,50.5,50.3,50.1,49.9,49.7,49.5,49.3,49.1,48.9,48.7,48.5,48.3,48.1,47.9,47.7,47.5,47.3,47.1,46.9,46.7,46.5,46.3,46.1,45.9,45.7,45.5,45.3,45.1,44.9,44.7,44.5,44.3,44.1,43.9,43.7,43.5,43.3,43.1,42.9,42.6,42.4,42.2,42,41.8,41.6,41.4,41.2,41,40.8,40.6,40.4,40.2,40,39.8,39.6,39.4,39.2,39,38.8,38.6,38.4,38.2,38,37.8,37.6,37.4,37.2,37,36.8,36.6,36.4,36.2,36,35.8,35.6,35.4,35.2,35,34.8,34.6,34.4,34.2,34,33.8,33.6,33.4,33.1,32.9,32.7,32.5,32.3,32.1,31.9,31.7,31.5,31.3,31.1,30.9,30.7,30.5,30.3,30.1,29.9,29.7,29.5,29.3,29.1,28.9,28.7,28.5,28.3,28.1,27.9,27.7,27.5,27.3,27.1,26.9,26.7,26.5,26.3,26.1,25.9,25.7,25.5,25.3,25.1,24.9,24.7,24.5,24.3,24.1,23.9,23.6,23.4,23.2,23,22.8,22.6,22.4,22.2,22,21.8,21.6,21.4,21.2,21,20.8,20.6,20.4,20.2,20,19.8,19.6,19.4,19.2,19,18.8,18.6,18.4,18.2,18,17.8,17.6,17.4,17.2,17,16.8,16.6,16.4,16.2,16,15.8,15.6,15.4,15.2,15,14.8,14.6,14.4,14.1,13.9,13.7,13.5,13.3,13.1,12.9,12.7,12.5,12.3,12.1,11.9,11.7,11.5,11.3,11.1,10.9,10.7,10.5,10.3,10.1,9.9,9.7,9.5,9.3,9.1,8.9,8.7,8.5,8.3,8.1,7.9,7.7,7.5,7.3,7.1,6.9,6.7,6.5,6.3,6.1,5.9,5.7,5.5,5.3,5.1,4.9,4.6,4.4,4.2,4,3.8,3.6,3.4,3.2,3,2.8,2.6,2.4,2.2,2,1.8,1.6,1.4,1.2,1,0.8,0.6,0.4,0.2,0)


colorData = (0,0.5,2.9,5.2,7.6,9.9,12.3,14.7,17,19.4,21.7,24.1,26.4,28.8,31.2,33.5,35.9,38.2,40.6,42.9,45.3,47.6,50,52.4,54.7,57,59.3,61.6,63.8,65.9,68,70,72,73.8,75.6,77.3,78.9,80.4,81.9,83.2,84.5,85.7,86.8,87.9,88.8,89.7,90.6,91.4,92.1,92.7,93.3,93.9,94.4,94.9,95.3,95.7,96.1,96.4,96.8,97,97.3,97.5,97.8,98,98.1,98.3,98.4,98.6,98.7,98.8,98.9,99,99.1,99.2,99.3,99.3,99.4,99.4,99.5,99.5,99.6,99.6,99.7,99.7,99.7,99.7,99.8,99.8,99.8,99.8,99.8,99.9,99.9,99.9,99.9,99.9,99.9,99.9,99.9,99.9,99.9,99.9,99.9,100,99.9,99.9,99.9,99.9,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.8,99.7,99.7,99.7,99.7,99.7,99.7,99.7,99.7,99.7,99.7,99.7,99.6,99.6,99.6,99.6,99.6,99.6,99.6,99.6,99.5,99.5,99.5,99.5,99.5,99.5,99.5,99.4,99.4,99.4,99.4,99.4,99.3,99.3,99.3,99.3,99.3,99.2,99.2,99.2,99.2,99.1,99.1,99.1,99.1,99,99,99,98.9,98.9,98.9,98.8,98.8,98.8,98.7,98.7,98.7,98.6,98.6,98.5,98.5,98.4,98.4,98.3,98.3,98.2,98.2,98.1,98.1,98,98,97.9,97.8,97.8,97.7,97.6,97.6,97.5,97.4,97.3,97.2,97.2,97.1,97,96.9,96.8,96.7,96.6,96.5,96.4,96.3,96.2,96.1,96,95.8,95.7,95.6,95.5,95.3,95.2,95,94.9,94.8,94.6,94.4,94.3,94.1,93.9,93.8,93.6,93.4,93.2,93,92.8,92.6,92.4,92.2,92,91.7,91.5,91.3,91,90.8,90.5,90.2,90,89.7,89.4,89.1,88.8,88.5,88.2,87.9,87.5,87.2,86.9,86.5,86.1,85.8,85.4,85,84.6,84.2,83.8,83.4,83,82.5,82.1,81.6,81.2,80.7,80.2,79.7,79.3,78.7,78.2,77.7,77.2,76.6,76.1,75.5,75,74.4,73.8,73.2,72.6,72,71.4,70.8,70.1,69.5,68.8,68.2,67.5,66.8,66.2,65.5,64.8,64.1,63.4,62.7,61.9,61.2,60.5,59.8,59,58.3,57.6,56.8,56.1,55.3,54.6,53.8,53,52.3,51.5,50.8,50,49.2,48.5,47.7,47,46.2,45.4,44.7,43.9,43.2,42.4,41.7,41,40.2,39.5,38.8,38.1,37.3,36.6,35.9,35.2,34.5,33.8,33.2,32.5,31.8,31.2,30.5,29.9,29.2,28.6,28,27.4,26.8,26.2,25.6,25,24.5,23.9,23.4,22.8,22.3,21.8,21.3,20.7,20.3,19.8,19.3,18.8,18.4,17.9,17.5,17,16.6,16.2,15.8,15.4,15,14.6,14.2,13.9,13.5,13.1,12.8,12.5,12.1,11.8,11.5,11.2,10.9,10.6,10.3,10,9.8,9.5,9.2,9,8.7,8.5,8.3,8,7.8,7.6,7.4,7.2,7,6.8,6.6,6.4,6.2,6.1,5.9,5.7,5.6,5.4,5.2,5.1,5,4.8,4.7,4.5,4.4,4.3,4.2,4,3.9,3.8,3.7,3.6,3.5,3.4,3.3,3.2,3.1,3,2.9,2.8,2.8,2.7,2.6,2.5,2.4,2.4,2.3,2.2,2.2,2.1,2,2,1.9,1.9,1.8,1.8,1.7,1.7,1.6,1.6,1.5,1.5,1.4,1.4,1.3,1.3,1.3,1.2,1.2,1.2,1.1,1.1,1.1,1,1,1,0.9,0.9,0.9,0.9,0.8,0.8,0.8,0.8,0.7,0.7,0.7,0.7,0.7,0.6,0.6,0.6,0.6,0.6,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.1,0.1,0.1,0.1,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)





###############################
# Check integrety of settings #
###############################
def checkVal(val, rmin=0, rmax=1, *, check=None):
    'Check value range and exit() on problems.'
    def _ruling(x, mi, ma):
        if not mi <= x <= ma:
            # If not within range:
            print("[Settings] Invalid input '%s' for allowed range %d-%d." % (x, mi, ma))
            exit()


    if check is None:
        # If no special check:
        if type(val) is dict or type(val) is list or type(val) is tuple:
            # If checking an iterable var:
            for v in val:
                _ruling(v, rmin, rmax)
        else:
            # If not iterable:
            _ruling(val, rmin, rmax)

    elif check is "unsigned":
        # If requiring a unsigned value:
        if not val > 0:
            print("[Settings] Invalid input '%s' for allowed range 0-infinite." % (val))
            exit()

    elif check is "time":
        # If checking a timestamp:
        _ruling(val[0], 0, 23)
        _ruling(val[1], 0, 59)



checkVal(briCorrect, 0, 100)
checkVal(briRange, 1, 254)
checkVal(colorCorrect, 0, 100)
checkVal(colorValues, 2200, 4000)
checkVal(userAlarmTime, check="time")
checkVal(userAlarmOffset, 0, 120)
checkVal(userSleepTime, check="time")
checkVal(userWindDownTime, 0, 120)
checkVal(minPerTimeCode, 0, 60)
checkVal(totalDataPoints, check="unsigned")
checkVal(morningSlope, 0, totalDataPoints)
checkVal(dayFlat, 0, totalDataPoints)
checkVal(eveningSlope, 0, totalDataPoints)
checkVal(nightFlat, 0, totalDataPoints)
checkVal(brightnessData, 0, 100)
checkVal(colorData, 0, 100)
